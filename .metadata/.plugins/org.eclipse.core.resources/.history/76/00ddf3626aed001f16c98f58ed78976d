package controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;


import bean.ExerciseRecord; 

class ExerciseRecordServlet extends HttpServlet {
	 Connection conn = null;
     PreparedStatement st = null;
     ResultSet rs = null;

    @Override
    public void init() throws ServletException {
        try {
            Context context = new InitialContext();
            DataSource ds = (DataSource) context.lookup("java:/comp/env/jdbc/servdb");
            conn = ds.getConnection();} catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Do GET for displaying the exercise records
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int userId = Integer.parseInt(request.getParameter("userId"));
        ExerciseRecordDAO dao = new ExerciseRecordDAO(connection);
        List<ExerciseRecord> records = dao.getExerciseRecords(userId);
        request.setAttribute("records", records);
        RequestDispatcher dispatcher = request.getRequestDispatcher("exerciseRecords.jsp");
        dispatcher.forward(request, response);
    }

    // Do POST for adding or updating records
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");

        ExerciseRecordDAO dao = new ExerciseRecordDAO(connection);

        if ("add".equals(action)) {
            ExerciseRecord record = new ExerciseRecord();
            record.setUserId(Integer.parseInt(request.getParameter("userId")));
            record.setExerciseType(request.getParameter("exerciseType"));
            record.setExerciseDuration(Integer.parseInt(request.getParameter("exerciseDuration")));
            record.setCaloriesBurned(Integer.parseInt(request.getParameter("caloriesBurned")));
            record.setExerciseDate(request.getParameter("exerciseDate"));
            record.setProgressPercentage(Float.parseFloat(request.getParameter("progressPercentage")));

            if (dao.addExerciseRecord(record)) {
                response.sendRedirect("ExerciseRecordServlet?userId=" + record.getUserId());
            }
        } else if ("update".equals(action)) {
            ExerciseRecord record = new ExerciseRecord();
            record.setRecordId(Integer.parseInt(request.getParameter("recordId")));
            record.setExerciseType(request.getParameter("exerciseType"));
            record.setExerciseDuration(Integer.parseInt(request.getParameter("exerciseDuration")));
            record.setCaloriesBurned(Integer.parseInt(request.getParameter("caloriesBurned")));
            record.setExerciseDate(request.getParameter("exerciseDate"));
            record.setProgressPercentage(Float.parseFloat(request.getParameter("progressPercentage")));

            if (dao.updateExerciseRecord(record)) {
                response.sendRedirect("ExerciseRecordServlet?userId=" + record.getUserId());
            }
        }
    }

    @Override
    public void destroy() {
        try {
            if (connection != null) {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
